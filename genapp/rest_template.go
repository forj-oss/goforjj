package main

const template_rest_main = `package main

// This file has been created by "go generate" as initial code. go generate will never update it.
//
// If the template is incorrect, you need to fork github.hpe.com/christophe-larsonneur/goforjj and update   genapp/rest_template.go
// This code implements the FORJJ REST API plugin protocol.

import (
    "gopkg.in/alecthomas/kingpin.v2"
)

var cliApp {{.Name}}App

func main() {
    cliApp.init()

    switch kingpin.MustParse(cliApp.App.Parse(os.Args[1:])) {
    case "daemon":
       cliApp.start_server()
    }
}
`

const template_rest_routes = `package main

// This file is autogenerated by "go generate". Do not modify it.
// It has been generated from your {{.Name}}.yaml file. To update this file, update the yaml file.
// then do "go generate"
// If the template is incorrect, you need to fork github.hpe.com/christophe-larsonneur/goforjj and update   genapp/rest_template.go
// This code implements the FORJJ REST API plugin protocol.

import (
    "net/http"

    "github.com/gorilla/mux"
)

type Route struct {
    Name        string
    Method      string
    Pattern     string
    HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {

    router := mux.NewRouter().StrictSlash(true)
    for _, route := range routes {
        router.
            Methods(route.Method).
            Path(route.Pattern).
            Name(route.Name).
            Handler(route.HandlerFunc)
    }

    return router
}

var routes = Routes{
    Route{
        "Index",
        "GET",
        "/",
        Index,
    },
    Route{
        "Quit",
        "GET",
        "/quit",
        Quit,
    },
    Route{
        "Ping",
        "GET",
        "/ping",
        Ping,
    },
    Route{
        "Create",
        "POST",
        "/create",
        Create,
    },
    Route{
        "Update",
        "POST",
        "/update",
        Update,
    },
    Route{
        "Maintain",
        "POST",
        "/maintain",
        Maintain,
    },
}
`

const template_rest_handlers = `package main

import (
    "encoding/json"
    "fmt"
    "net/http"
    "github.com/gorilla/mux"
    "os"
)

// Index
func Index(_ http.ResponseWriter, _ *http.Request) {
    fmt.Printf("FORJJ - {{.Name}} driver for FORJJ. It is Implemented as a REST API.")
}


// Quit
func Quit(_ http.ResponseWriter, _ *http.Request) {
    os.Exit(0)
}


// Ping
func Quit(_ http.ResponseWriter, _ *http.Request) {
    fmt.Println("OK")
}

// Do creating route
func Create(w http.ResponseWriter, r *http.Request) {

}

// Do updating route
func Update(w http.ResponseWriter, r *http.Request) {

}

// Do maintaining route
func Update(w http.ResponseWriter, r *http.Request) {

}
`

const template_rest_app = `package main

// This file is autogenerated by "go generate". Do not modify it.
// It has been generated from your {{.Name}}.yaml file. To update this file, update the yaml file.
// then do "go generate"
// If the template is incorrect, you need to fork github.hpe.com/christophe-larsonneur/goforjj and update   genapp/rest_template.go
// This code implements the FORJJ REST API plugin protocol.

import (
    "github.com/gorilla/mux"
    "os/signal"
    "syscall"
    "net"
    "os"
    "log"
)

func (a *{{.Name}}App)start_server() {
    sigs := make(chan os.Signal, 1)
    signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

    ln, err := net.Listen("unix", "/tmp/test.sock")
    //ln, err := net.Listen("tcp", ":8081")
    if err != nil {
        log.Fatal("listen error:", err)
    }
    go func () {
        <-sigs
        fmt.Printf("\nExiting and closing socket...\n")
        ln.Close()
        os.Exit(0)
    }()
    fmt.Printf("Starting http service on socket : %s\n", "/tmp/test.sock")

    router := NewRouter())

    srv := http.Server{Handler: router}
    log.Fatal(srv.Serve(ln))
}
`

const template_rest_cli = `package main

// This file is autogenerated by "go generate". Do not modify it.
// It has been generated from your {{.Name}}.yaml file. To update this file, update the yaml file.
// then do "go generate"
// If the template is incorrect, you need to fork github.hpe.com/christophe-larsonneur/goforjj and update   genapp/rest_template.go
// This code implements the FORJJ REST API plugin protocol.

import (
    "gopkg.in/alecthomas/kingpin.v2"
    "github.hpe.com/christophe-larsonneur/goforjj"
    "os"
    "fmt"
    "gopkg.in/yaml.v2"
)

type {{.Name}}App struct {
    App *kingpin.Application
    params Params
    socket_file string
    socket_path string
    src_path string
    Yaml goforjj.YamlPlugin
}

type Params struct {
    socket_file *string
    socket_path *string
    src_path *string
}

func (a *{{.Name}}App)init() {
    a.App = kingpin.New("{{.Name}}", "{{.Description}}")
{{ if .Version }}\
    a.App.Version("{{ .Version }}")
{{ end }}\

    // true to create the Infra
    a.IsInfra = a.App.Flag("infra", "Used by upstream plugins to create initial repos.").Hidden().Bool()
  a.Flags = make(map[string]*string)
  a.Tasks = make(map[string]goforjj.PluginTask)
{{ range $Flagname, $Opts := .Actions.common.Flags }}\
  a.Flags["{{ $Flagname }}"] = a.App.Flag("{{ $Flagname }}", "{{ $Opts.Help }}")\
{{   if $Opts.Required }}.Required(){{ end }}\
{{   if $Opts.Default  }}.Default("{{$Opts.Default}}"){{ end }}\
{{   if $Opts.Hidden   }}.Hidden(){{ end }}.String()
{{ end }}

{{ range $cmd, $flags := (filter_cmds .Actions) }}\
  a.Tasks["{{$cmd}}"] = goforjj.PluginTask {
    Flags: make(map[string]*string),
    Cmd  : a.App.Command("{{ $cmd }}", "{{ $flags.Help }}"),
  }
{{   range $Flagname, $Opts := $flags.Flags }}\
  a.Tasks["{{$cmd}}"].Flags["{{ $Flagname }}"] = a.Tasks["{{$cmd}}"].Cmd.Flag("{{ $Flagname }}", "{{ $Opts.Help }}")\
{{     if $Opts.Required }}.Required(){{ end }}\
{{     if $Opts.Default  }}.Default("{{$Opts.Default}}"){{ end }}\
{{     if $Opts.Hidden   }}.Hidden(){{ end }}.String()
{{   end }}
{{ end }}\
}
`
